#!/bin/bash

# Description:
#   This script aims at archiving projects that are all located in the same parent folder.
#   For each project, a ZIP archive is created at the same location. If successful, the project
#   folder is recursively deleted.
#
# Usage:
#   ./archive-projects.sh
#   ./archive-projects.sh <PROJECT_FOLDER>
# e.g.:
#   ./archive-projects.sh /home/USER/projects/
#
# Note: 
#   If no argument is passed, the following path is used: '$HOME/Audit'

COLOR_RST="\e[0m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_YELLOW_BOLD="\e[1;33m"
COLOR_BLUE_BOLD="\e[1;34m"

PROJECT_FOLDER="${HOME}/Audit"

# If a path is provided as an argument, use it. Otherwise use the default path "/home/USER/Audit".
if [ $# -gt 0 ]
then
    PROJECT_FOLDER="$1"
fi

# Use the command 'find' to enumerate all the folders in the project path.
echo -e "${COLOR_BLUE_BOLD}[*]${COLOR_RST} Listing content of folder '${PROJECT_FOLDER}' ..."
PROJECT_LIST=$(find "${PROJECT_FOLDER}" -type d -mindepth 1 -maxdepth 1 2>/dev/null)
if [ $? != 0 ]
then
    echo -e "${COLOR_RED_BOLD}[-]${COLOR_RST} Failed to list folder content!"
    exit
fi

# Check whether there is at least one folder to archive.
# If not, exit early.
PROJECT_COUNT=$(echo -n "${PROJECT_LIST}" | wc -c)
if [ $PROJECT_COUNT == 0 ]
then
    echo -e "${COLOR_YELLOW_BOLD}[!]${COLOR_RST} Nothing to do, exiting."
    exit
fi

# Show the folders that can be archived.
echo ""
for p in $(echo "${PROJECT_LIST}")
do
    PROJECT_NAME="$(basename $p)"
    echo "    > $PROJECT_NAME"
done
echo ""

# Ask whether we should continue and archive all the folders.
while true
do
    echo -ne "${COLOR_BLUE_BOLD}[?]${COLOR_RST} Archive these projects? (y/n) "
    read yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes (y) or no (n).";;
    esac
done

# For each folder, create the path of the corresponding archive simply by appending '.zip'.
# Before proceeding, check whether the ZIP file already exists.
# If the ZIP file doesn't exist, archive the project with the 'zip' command.
# Once the command has finished, check the return code. If the command succeeded, delete the project folder.
# Otherwise, leave the folder as is. We don't want to delete a project by accident. 
COUNTER=0
for p in $(echo "${PROJECT_LIST}")
do
    PROJECT_NAME="$(basename $p)"
    ZIP_PATH="${p}.zip"
    ZIP_NAME="$(basename ${ZIP_PATH})"
    if [ -f "${ZIP_PATH}" ]
    then
        echo -e "${COLOR_YELLOW_BOLD}[!]${COLOR_RST} ZIP file '${ZIP_PATH}' already exists, skipping project."
    else
        echo -e "${COLOR_BLUE_BOLD}[*]${COLOR_RST} Archiving project '${PROJECT_NAME}' ..."
        OLD_PATH=$(pwd)
        cd "$p/../"
        zip -r "${ZIP_PATH}" "$PROJECT_NAME" >/dev/null 2>&1
        if [ $? == 0 ]
        then
            echo -e "${COLOR_GREEN_BOLD}[+]${COLOR_RST} Successfully created file '${ZIP_NAME}'. Deleting project folder..."
            COUNTER=$((COUNTER+1))
            rm -rf "${p}"   
        else
            echo -e "${COLOR_RED_BOLD}[-]${COLOR_RST} Failed to create archive."
        fi
        cd $OLD_PATH
    fi
done

# At the end of the process, only ZIP files should remain in the project folder.
echo -e "${COLOR_BLUE_BOLD}[*]${COLOR_RST} ${COUNTER} projects were archived."