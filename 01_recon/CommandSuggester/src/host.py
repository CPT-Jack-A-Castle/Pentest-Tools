
from src.port import Port

class Host:
    def __init__(self, xml):
        self.xml = xml
        self.addr = self.xml.address["addr"]
        self.ports = []
        if self.xml.ports != None:
            for port in self.xml.ports.find_all("port"):
                self.ports.append(Port(port))
        self.commands = []
        self.os,self.os_accuracy = self.parseos()

    def __eq__(self, other):
        if isinstance(other, Host):
            return self.addr == other.addr
        return NotImplemented

    def __str__(self):
        return "%s" % (self.addr)

    # <osmatch accuracy="93" line="19084" name="Citrix NetScaler VPX load balancer">
    def parseos(self):
        result = ""
        accuracy_max = 0
        for o in self.xml.find_all("osmatch"):
            accuracy = int(o["accuracy"], 10)
            if accuracy > accuracy_max:
                result = o["name"]
                accuracy_max = accuracy
        return result,accuracy_max

    def markdown(self):
        result = "## Host: %s\n\n" % (self.addr)

        if self.os != "":
            result += "OS: %s (accuracy: %i%%)\n\n" % (self.os, self.os_accuracy)

        result += "| PORT | STATE | SERVICE | VERSION |\n"
        result += "| :---: | :---: | :---: | --- |\n"
        for port in self.ports:
            result += "| %i/%s | %s | %s | %s |\n" % (port.portid, port.protocol, port.state, port.service.name, port.service.getfullversion())
        result += "\n\n"

        for port in self.ports:
            result += "%s\n" % (port.outmarkdown())
        
        return result
    
    def generatecommands(self, suggester):
        for port in self.ports:
            port.generatecommands(suggester, self)

