
import json

class CommandSuggester:
    def __init__(self, commands_json):
        self.commands = json.loads(commands_json)
        self.logdir = "./recon"
        self.proxytool = ""

    def setlogdir(self, logdir):
        self.logdir = logdir
    
    def setproxytool(self, toolname):
        self.proxytool = toolname

    def getcommands(self, host, port, multi=False):
        result = []
        commands_raw = []
        logdir = self.logdir

        service_name = port.service.name
        proto = service_name
        
        # HTTPS -> HTTP
        if service_name == "https" or service_name == "ssl/http":
            service_name = "http"
            proto = "https"
        
        # LDAPS -> LDAP
        if service_name == "ldaps":
            service_name = "ldap"
        
        if service_name in self.commands.keys():
            if multi and "commands-multi" in self.commands[service_name].keys():
                commands_raw = self.commands[service_name]["commands-multi"]
            if not multi:
                commands_raw = self.commands[service_name]["commands"]

        for c in commands_raw:
            command = c 
            command = command.replace("{TARGET_HOST}", host.addr)
            command = command.replace("{TARGET_PORT}", str(port.portid))
            command = command.replace("{TARGET_PROTO}", proto)
            command = command.replace("{LOGDIR}", logdir)
            if self.proxytool != "":
                command = "%s %s" % (self.proxytool, command)
            result.append(command)

        return result
