#!/usr/bin/env python3

import argparse
import os
import sys
from pathlib import Path
from bs4 import BeautifulSoup

from src.host import Host
from src.reports.nmap import NmapScanResult
from src.reports.final import FinalReport
from src.suggester import CommandSuggester

RSRC_TEMPLATE = "template.tmpl"
RSRC_CSS = "style.css"
RSRC_COMMANDS = "commands.json"

def main():

    parser = argparse.ArgumentParser(description="Suggest recon commands from Nmap XML output")
    parser.add_argument("xml", help="Path of an Nmap XML file to parse")
    parser.add_argument("html", help="Path of the output HTML file")
    #parser.add_argument("-o", action="store_true", help="Generate an HTML report")
    # parser.add_argument("--lhost", help="Local IP address (used for reverse connections)", default="10.10.13.37")
    # parser.add_argument("--lport", help="Local port (used for reverse connections)", default="4444")
    args = parser.parse_args()
    
    # global g_lhost, g_lport
    # g_lhost = args.lhost
    # g_lport = args.lport

    in_path = args.xml
    out_path = args.html

    #print("[*] Input file is: %s" % in_path)

    try:
        in_file = open(in_path, 'r')
    except FileNotFoundError:
        print("[-] File not found.")
        return
    except:
        print("[-] Unexpected error: '%s'" % (sys.exc_info()[0]))
        return 

    fileext = os.path.splitext(in_path)[1]
    if fileext != ".xml":
        print("[!] Input file doesn't have the '.xml' extension")
    
    in_content = in_file.read()
    in_file.close()
    soup = BeautifulSoup(in_content, "xml")

    print("[*] Parsing file: %s" % in_path)
    nmap_result = NmapScanResult(soup)
    #nmap_result_md = nmap_result.markdown()
    #print(nmap_result_md)

    tmpl = getresource(RSRC_TEMPLATE)
    if tmpl is None:
        print("[-] Failed to get resource file: %s" % RSRC_TEMPLATE)
        return
    
    css = getresource(RSRC_CSS)
    if css is None:
        print("[-] Failed to get resource file: %s" % RSRC_CSS)
        return

    commands = getresource(RSRC_COMMANDS)
    if commands is None:
        print("[-] Failed to get resource file: %s" % RSRC_COMMANDS)
    
    print("[*] Generating custom commands.")
    suggester = CommandSuggester(commands)
    nmap_result.generatecommands(suggester)

    print("[*] Creating report.")
    final_report = FinalReport(nmap_result)
    final_report_html = final_report.html(tmpl, css)
    print(final_report)

    try:
        out_file = open(out_path, "wb")
        out_file.write(final_report_html.encode("utf-8"))
        out_file.close()
        print("[+] Report written to: %s" % out_path)
    except:
        print("[-] Unexpected error: '%s'" % (sys.exc_info()[0]))
        return

def getresource(filename):
    script_path = Path(os.path.realpath(__file__))
    script_folder_path = script_path.parent
    resource_folder_path = script_folder_path.joinpath("resource")
    resource_path = resource_folder_path.joinpath(filename)

    try:
        f = open(resource_path, "rb")
        content = f.read().decode("utf-8")
        f.close()
        return content
    except FileNotFoundError:
        print("[-] File not found: %s" % resource_path)
    except:
        print("[-] Unexpected error: '%s'" % (sys.exc_info()[0]))
    return None

if __name__ == '__main__':
    main()
