#!/bin/bash

COLOR_RST="\e[0m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_YELLOW_BOLD="\e[1;33m"
COLOR_CYAN_BOLD="\e[1;36m"

DIR_PUB="/pub"
DIR_TOOLS="/opt"
DIR_TOOLS_NESSUS="$DIR_TOOLS/nessus"
USER_NAME=$(logname)
USER_HOME=$(eval echo ~$USER_NAME)

function exec_print_status () {
    # Usage:
    #   exec_print_status <COMMAND>
    echo -n -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Executing command '${COLOR_CYAN_BOLD}${1}${COLOR_RST}'..."
    OUTPUT=$(eval $1 >/dev/null 2>&1)

    RET_CODE=$?

    if [ $RET_CODE == 0 ]
    then
        echo -e " ${COLOR_GREEN_BOLD}OK${COLOR_RST}"
    else
        echo -e " ${COLOR_RED_BOLD}KO${COLOR_RST}"
        echo "$OUTPUT"
    fi

    return $RET_CODE
}

function update_system () {
    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Updating package list."
    exec_print_status "apt update"

    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Updating packages."
    apt upgrade -y
    apt full-upgrade -y

    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Updating system."
    apt dist-upgrade -y

    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Removing unused packages."
    exec_print_status "apt autoclean -y"
    exec_print_status "apt autoremove -y"
    
    # Update Snap apps only if snap is installed
    which snap >/dev/null
    if [ $? -eq 0 ];
    then
        echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Updating snap packages."
        exec_print_status "snap refresh"
    fi
}

function update_nessus () {
    # Update Nessus if present 
    if [ -d $DIR_TOOLS_NESSUS ];
    then
        echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Updating Nessus."
        service nessusd stop 
        bash -c "$DIR_TOOLS_NESSUS/sbin/nessuscli update --all" 
        echo ""
    fi
}

function update_git_repos () {
    # Update GIT repositories 
    if [ ! -z $DIR_TOOLS ];
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do 
            if [ -d "$d/.git" ];
            then
                echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Found GIT repository: '$COLOR_CYAN_BOLD$d$COLOR_RST'."
                old_pwd=$(pwd)
                cd "$d"
                exec_print_status "git pull --no-rebase"
                cd "$old_pwd"  
            fi
        done
    fi
}

function update_git_release_folders () {
    # Update folders containing a custom GitHub release file
    if [ ! -z $DIR_TOOLS ]
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do
            if [ -f "$d/.release" ]
            then
                echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST This folder contains GIT release files: '$COLOR_CYAN_BOLD$d$COLOR_RST'."

                old_pwd=$(pwd)
                cd "$d"

                release_file_content=$(cat "./.release")
                release_file_url="$(echo -e $release_file_content | cut -d',' -f1)"
                release_file_version="$(echo -e $release_file_content | cut -d',' -f2)"

                if [ "$release_file_url" == "" -o "$release_file_version" == "" ]
                then
                    echo -e "$COLOR_RED_BOLD[-]$COLOR_RST Release file '$d/.release' is malformed!"
                else
                    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Repository URL: $release_file_url"
                    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Local version: ${COLOR_CYAN_BOLD}$release_file_version${COLOR_RST}"

                    release_git_content="$(curl -L --silent $release_file_url)"
                    release_git_version="$(echo $release_git_content | jq -r '.tag_name')"
                    
                    if [ $release_git_version == "" ]
                    then
                        echo -e "$COLOR_RED_BOLD[-]$COLOR_RST Failed to query latest release version."
                    else
                        echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST GitHub version: ${COLOR_CYAN_BOLD}${release_git_version}${COLOR_RST}"

                        if [ $release_git_version == $release_file_version ]
                        then
                            echo -e "$COLOR_GREEN_BOLD[+]$COLOR_RST This folder is already up to date."
                        else
                            echo -e "$COLOR_YELLOW_BOLD[!]$COLOR_RST A new version is available!"

                            # Remove current release files
                            echo -e "Removing old files..."
                            rm -rf *

                            # Get the URL of each release file 
                            release_git_urls="$(echo $release_git_content | jq -r '.assets[] | select(.).browser_download_url')"
                            
                            # For each URL, download the target file 
                            for release_git_url in $(echo -e $release_git_urls)
                            do
                                echo -e "File URL: $release_git_url"
                                download_uncompress_archive $release_git_url
                            done

                            # Update the release file
                            release_file_content="$release_file_url,$release_git_version"
                            echo -e "Creating new .release file: $release_file_content"
                            echo $release_file_content > ".release"
                        fi
                    fi
                fi

                cd $old_pwd
            fi
        done
    fi
}

function download_uncompress_archive () {
    # Usage:
    #   uncompress_archive <URL>
    exec_print_status "wget --quiet '$1'"
    if [ $? != 0 ]; then return 1; fi

    filefullname="${1##*/}"
    filename="${filefullname%.*}"
    fileext="${filefullname##*.}"

    if [ $fileext == "zip" ]
    then
        echo "File '$filefullname' looks like a ZIP archive."
        exec_print_status "unzip $filefullname -d $filename"
        if [ $? != 0 ]; then return 1; fi
        exec_print_status "rm -f $filefullname"
    elif [ $fileext == "gz" ]
    then
        echo "File '$filefullname' looks like a GZIP archive."
        exec_print_status "gzip -d $filefullname"
        if [ $? != 0 ]; then return 1; fi
    elif [ $fileext == "7z" ]
    then
        echo "File '$filefullname' looks like a 7z archive."
        exec_print_status "7z d $filefullname"
        if [ $? != 0 ]; then return 1; fi
        rm -f $filefullname
    fi
    return 0
}

function check_root () {

    echo -e "$COLOR_CYAN_BOLD[*] Checking if current user is 'root'.$COLOR_RST"

    echo -n -e "I am G${COLOR_CYAN_BOLD}root${COLOR_RST}?..."
    if [ $(id --u) == 0 ]
    then
        echo -e " ${COLOR_GREEN_BOLD}OK${COLOR_RST}"
        return 0
    else
        echo -e " ${COLOR_RED_BOLD}KO${COLOR_RST}"
        return 1
    fi
}

function check_internet_access () {

    echo -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Checking network connectivy."
    
    APT_SOURCES_FILE="/etc/apt/sources.list"
    RESULT=0

    # Check if file exists
    SOURCES=$(cat $APT_SOURCES_FILE 2>/dev/null)
    if [ $? != 0 ]
    then
        echo -e "$COLOR_RED_BOLD[-]$COLOR_RST Failed to open file: '$APT_SOURCES_FILE'"
        return 1
    fi

    # For each entry in sources.list, check whether connectivity is OK.
    for s in $(echo "$SOURCES" | grep -v '^#' | grep 'deb ' | cut -d' ' -f2)
    do
        echo -n -e "$COLOR_CYAN_BOLD[*]$COLOR_RST Checking URL '${COLOR_CYAN_BOLD}${s}${COLOR_RST}'..."
        curl -s --connect-timeout 3 "$s" >/dev/null 2>&1
        if [ $? == 0 ]
        then
            echo -e " ${COLOR_GREEN_BOLD}OK${COLOR_RST}"
        else
            echo -e " ${COLOR_RED_BOLD}KO${COLOR_RST}"
            RESULT=1
        fi
    done
    
    return $RESULT
}

check_root || exit
check_internet_access || exit

update_system
update_nessus
update_git_repos
update_git_release_folders

