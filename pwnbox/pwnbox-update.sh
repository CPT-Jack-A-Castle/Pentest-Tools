#!/bin/bash

COLOR_RST="\e[0m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_YELLOW_BOLD="\e[1;33m"
COLOR_CYAN_BOLD="\e[1;36m"

DIR_PUB="/pub"
DIR_TOOLS="/opt"
DIR_TOOLS_NESSUS="$DIR_TOOLS/nessus"
USER_NAME=$(logname)
USER_HOME=$(eval echo ~$USER_NAME)

function exec_print_status () {
    # Usage:
    #   exec_print_status <COMMAND>
    echo -e "$COLOR_CYAN_BOLD[*] Executing command '$1'...$COLOR_RST"
    eval $1

    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD[+] Result: OK$COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD[-] Result: KO$COLOR_RST"
    fi
}

function update_system () {
    echo -e "$COLOR_CYAN_BOLD[*] Updating package list.$COLOR_RST"
    exec_print_status "apt update"

    echo -e "$COLOR_CYAN_BOLD[*] Updating packages.$COLOR_RST"
    exec_print_status "apt upgrade -y"
    exec_print_status "apt full-upgrade -y"

    echo -e "$COLOR_CYAN_BOLD[*] Updating system.$COLOR_RST"
    exec_print_status "apt dist-upgrade -y"

    echo -e "$COLOR_CYAN_BOLD[*] Removing unused packages.$COLOR_RST"
    exec_print_status "apt autoclean -y"
    exec_print_status "apt autoremove -y"
    
    # Update Snap apps only if snap is installed
    which snap >/dev/null
    if [ $? -eq 0 ];
    then
        echo -e "$COLOR_CYAN_BOLD[*] Updating snap pachages.$COLOR_RST"
        exec_print_status "snap refresh"
    fi
}

function update_nessus () {
    # Update Nessus if present 
    if [ -d $DIR_TOOLS_NESSUS ];
    then
        echo -e "$COLOR_CYAN_BOLD[*] Updating Nessus.$COLOR_RST"
        service nessusd stop 
        bash -c "$DIR_TOOLS_NESSUS/sbin/nessuscli update --all" 
        echo ""
    fi
}

function update_git_repos () {
    # Update GIT repositories 
    #echo -e "$COLOR_CYAN_BOLD[*] Updating GIT repositories.$COLOR_RST"
    if [ ! -z $DIR_TOOLS ];
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do 
            if [ -d "$d/.git" ];
            then
                echo -e "$COLOR_CYAN_BOLD[*] Found GIT repository: '$d'.$COLOR_RST"
                old_pwd=$(pwd)
                cd "$d"

                git_pull=$(git pull 2>&1)
                if [ $? == 0 ]
                then
                    echo $git_pull | grep "Already up to date" >/dev/null
                    if [ $? == 0 ]
                    then
                        echo -e "$COLOR_GREEN_BOLD[+] The repository is already up to date.$COLOR_RST"
                    else
                        echo -e "$COLOR_GREEN_BOLD[+] The repository was successfully updated.$COLOR_RST"
                    fi
                else
                    echo -e "$COLOR_RED_BOLD[-] Failed to update repository.$COLOR_RST"
                    echo $git_pull
                fi

                cd "$old_pwd"  
            fi
        done
    fi
}

function update_git_release_folders () {
    # Update folders containing a custom GitHub release file
    #echo -e "$COLOR_CYAN_BOLD[*] Updating GIT release folders.$COLOR_RST"
    if [ ! -z $DIR_TOOLS ]
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do
            if [ -f "$d/.release" ]
            then
                echo -e "$COLOR_CYAN_BOLD[*] This folder contains GIT release files: '$d'.$COLOR_RST"

                old_pwd=$(pwd)
                cd "$d"

                release_file_content=$(cat "./.release")
                release_file_url="$(echo -e $release_file_content | cut -d',' -f1)"
                release_file_version="$(echo -e $release_file_content | cut -d',' -f2)"

                echo -e "$COLOR_CYAN_BOLD[*] URL: $release_file_url$COLOR_RST"
                echo -e "$COLOR_CYAN_BOLD[*] VERSION: $release_file_version$COLOR_RST"

                if [ "$release_file_url" == "" -o "$release_file_version" == "" ]
                then
                    echo -e "$COLOR_RED_BOLD[-] Release file '$d/.release' is malformed!$COLOR_RST"
                else
                    release_git_content="$(curl -L --silent $release_file_url)"
                    release_git_version="$(echo $release_git_content | jq -r '.tag_name')"
                    
                    if [ $release_git_version == "" ]
                    then
                        echo -e "$COLOR_RED_BOLD[-] Failed to query latest release version.$COLOR_RST"
                    else
                        if [ $release_git_version == $release_file_version ]
                        then
                            echo -e "$COLOR_GREEN_BOLD[+] This folder is already up to date.$COLOR_RST"
                        else
                            echo -e "$COLOR_YELLOW_BOLD[!] New version available: $release_git_version$COLOR_RST"

                            # Remove current release files
                            echo -e "$COLOR_CYAN_BOLD[*] Removing old files...$COLOR_RST"
                            rm -rf *

                            # Get the URL of each release file 
                            release_git_urls="$(echo $release_git_content | jq -r '.assets[] | select(.).browser_download_url')"
                            
                            # For each URL, download the target file 
                            for release_git_url in $(echo -e $release_git_urls)
                            do
                                echo -e "$COLOR_CYAN_BOLD[*] URL: $release_git_url$COLOR_RST"
                                download_uncompress_archive $release_git_url
                            done

                            # Update the release file
                            release_file_content="$release_file_url,$release_git_version"
                            echo -e "$COLOR_CYAN_BOLD[*] New release: $release_file_content$COLOR_RST"
                            echo $release_file_content > ".release"
                        fi
                    fi
                fi

                cd $old_pwd
            fi
        done
    fi
}

function download_uncompress_archive () {
    # Usage:
    #   uncompress_archive <URL>
    wget --quiet $1

    if [ $? -eq 0 ]
    then
        filefullname="${1##*/}"
        filename="${filefullname%.*}"
        fileext="${filefullname##*.}"

        echo -e "$COLOR_CYAN_BOLD[*] Downloaded file: $filefullname$COLOR_RST"

        if [ $fileext == "zip" ]
        then
            echo -e "$COLOR_CYAN_BOLD[*] The file is a ZIP archive. Decompressing...$COLOR_RST"
            unzip $filefullname 1>/dev/null
            rm -f $filefullname
        elif [ $fileext == "gz" ]
        then
            echo -e "$COLOR_CYAN_BOLD[*] The file is a GZIP archive. Decompressing...$COLOR_RST"
            gzip -d $filefullname
        elif [ $fileext == "7z" ]
        then
            echo -e "$COLOR_CYAN_BOLD[*] The file is a 7z archive. Decompressing...$COLOR_RST"
            7z d $filefullname 1>/dev/null
            rm -f $filefullname
        fi
        return 0
    else
        echo -e "$COLOR_CYAN_BOLD[*] Download failed!$COLOR_RST"
        return 1
    fi
}

function update_python_packages () {
    
    echo -e "$COLOR_CYAN_BOLD[*] Updating Python packages.$COLOR_RST"
    
    out_file="/tmp/requirements.txt"
    
    pip freeze | sed s/'=='/'>='/g > $out_file
    pip install -r $out_file --upgrade
    
    pip3 freeze | sed s/'=='/'>='/g > $out_file
    pip3 install -r $out_file --upgrade
    
    rm $out_file 2>/dev/null 
}

# Check if current user is root
if [ ! $(id --u) == 0 ];
then
    echo "You must be root"
    exit
fi

update_system
update_nessus
update_git_repos
update_git_release_folders
#update_python_packages

