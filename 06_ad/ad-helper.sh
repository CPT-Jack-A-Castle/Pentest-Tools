#!/bin/bash

SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
PWNBOX_HELPER="${SCRIPT_DIR}/../00_pwnbox/pwnbox-helper.sh"

source "$PWNBOX_HELPER" || exit

WORKSPACE_DB_FILE="workspace.db"
WORKSPACE_LOG_FILE="workspace.log"
DB_TABLE_DOMAIN="domain"
DB_TABLE_USER="user"
DB_TABLE_DC="dc"
IMPACKET_GETADUSERS="GetADUsers.py"

# DESCRIPTION
#     Check if CWD is a pentest workspace (i.e. if the parent directory is ./Audit/).
# ARGUMENTS
#     None
# RETURN CODE
#     0  - Everything is fine
#     1  - Current directory is not a pentest workspace
function is_workspace_directory {
    return_code=0
    parent=$(realpath "$(pwd)/../")
    expected="Audit"
    parent_name=$(basename $parent)
    if [ ! "${parent_name}" == "${expected}" ]
    then
        print_error "Current directory is not a valid workspace"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Check if the workspace DB exists and is initialized.
# ARGUMENTS
#     None
# RETURN CODE
#     0  - Everything is fine
#     1  - DB file does not exist
#     2  - DB is not initialized
function is_db_initialized {
    return_code=0
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ ! -f $file_path ]
    then
        return_code=1
        print_error "Database file does not exist: '${file_path}'"
    else
        sqlite3 $file_path "SELECT COUNT(*) FROM domain;" >/dev/null 2>&1
        if [ $? != 0 ]
        then
            return_code=2
            print_error "Database is not yet initialized"
        fi
    fi
    return $return_code
}

# DESCRIPTION
#     Execute a command and log its output to a file.
# ARGUMENTS
#     command - command to execute
# RETURN CODE
#     0  - Everything is fine
#     1  - Not in a workspace
#     2  - Invalid number of arguments
function exec_and_log {
    return_code=0
    is_workspace_directory || return 1
    if [ $# -eq 1 ]
    then
        command="${1}"
        log_date=$(date +"%Y-%m-%d %H:%M:%S")
        log_msg="
----------------------------------------------------------------
[${log_date}] The following command was executed:
----------------------------------------------------------------

\$ ${command}
"
        echo -e "${log_msg}" >> $WORKSPACE_LOG_FILE

        bash -c "${command}" | tee -a $WORKSPACE_LOG_FILE

        log_date=$(date +"%Y-%m-%d %H:%M:%S")
        log_msg="
----------------------------------------------------------------
[${log_date}] A command terminated
----------------------------------------------------------------
"
        echo -e "${log_msg}" >> $WORKSPACE_LOG_FILE

    else
        print_error "log" "Invalid number of arguments: ${#}"
        return_code=2
    fi
    return $return_code
}

# DESCRIPTION
#     Check if a given string is a NT hash.
# ARGUMENTS
#     input - a string representing a password or a NT hash
# RETURN CODE
#     0  - The input string is a NT hash
#     1  - Missing argument
#     2  - The input string is not a NT hash
function is_nt_hash {
    return_code=0
    if [ $# -eq 1 ]
    then
        if [[ ! ${1} =~ ^([[:xdigit:]]{32})$ ]]
        then
            return_code=2
        fi
    else
        print_error "is_nt_hash" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

function generate_random_string {
    return_code=0
    head -n10 /dev/urandom | md5sum | awk '{ print $1 }' | head -c16
    return $return_code
}

# DESCRIPTION
#     Initialize a workspace database.
# ARGUMENTS
#     None
# RETURN CODE
#     0  - Everything is fine
#     1  - A workspace DB already exists
# NOTES
#    - domain: id, name, fqdn
#    - user: id, domain, name, password, nthash
#    - dc: id, name, fqdn, ip
function db_init {
    return_code=0
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ -f $file_path ]
    then
        print_error "A database already exists: '${file_path}'"
        return_code=1
    else
        return_code=2
        sqlite3 $file_path "CREATE TABLE domain (id INTEGER PRIMARY KEY, name TEXT, fqdn TEXT);" || return $return_code
        sqlite3 $file_path "CREATE TABLE user (id INTEGER PRIMARY KEY, domain TEXT, name TEXT, password TEXT);" || return $return_code
        sqlite3 $file_path "CREATE TABLE dc (id INTEGER PRIMARY KEY, name TEXT, fqdn TEXT, ip TEXT);" || return $return_code

        print_success "Created DB file: '${file_path}'"
        return_code=0
    fi
    return $return_code
}

# DESCRIPTION
#     Issue a raw query on the workspace database.
# ARGUMENTS
#     query - an SQL query
# RETURN CODE
#     0  - Everything is fine
#     1  - The workspace database does not exist or is not initialized
function db_query {
    return_code=0
    is_db_initialized || return 1
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ $# -gt 0 ]
    then
        echo "${1}" | sqlite3 $file_path
    fi
    return $return_code
}

# DESCRIPTION
#     Select entries from the workspace database.
# ARGUMENTS
#     filter - optional filter for the query (e.g.: username when querying user information)
# RETURN CODE
#     0  - Everything is fine
#     1  - The workspace database does not exist or is not initialized
function db_select {
    return_code=0
    is_db_initialized || return 1
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ $# -gt 0 ]
    then
        case $1 in
        
        $DB_TABLE_DOMAIN)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print toupper($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
SELECT * FROM ${DB_TABLE_DOMAIN} WHERE name=:n
EOF
            else
                sqlite3 $file_path <<EOF
SELECT * FROM ${DB_TABLE_DOMAIN}
EOF
            fi
            ;;

        $DB_TABLE_USER)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print tolower($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
SELECT * FROM ${DB_TABLE_USER} WHERE name=:n
EOF
            else
                sqlite3 $file_path <<EOF
SELECT * FROM ${DB_TABLE_USER}
EOF
            fi
            ;;

        $DB_TABLE_DC)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print toupper($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
SELECT * FROM ${DB_TABLE_DC} WHERE name=:n
EOF
            else
                sqlite3 $file_path <<EOF
SELECT * FROM ${DB_TABLE_DC}
EOF
            fi
            ;;

        *)
            print_error "db_select" "Unknown object type: ${1}"
            return_code=1
        esac 
    fi
    return $return_code
}

# DESCRIPTION
#     Add data to the database.
# ARGUMENTS
#     A list of arguments that depends on the data type to add.
# RETURN CODE
#     0  - Everything is fine
#     1  - The workspace database does not exist or is not initialized
function db_insert {
    return_code=0
    is_db_initialized || return 1
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ $# -gt 0 ]
    then
        case $1 in

        $DB_TABLE_DOMAIN)
            if [ $# -ge 3 ]
            then
                domain_name=$(echo "${2}" | awk '{ print toupper($1) }')
                domain_fqdn=$(echo "${3}" | awk '{ print tolower($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${domain_name}
.param set :f ${domain_fqdn}
INSERT INTO ${DB_TABLE_DOMAIN} (name, fqdn) VALUES (:n, :f)
EOF
            else
                print_error "db_insert" "Invalid number of arguments: ${#}"
                return_code=2
            fi
            ;;

        $DB_TABLE_DC)
            if [ $# -ge 4 ]
            then
                dc_name=$(echo "${2}" | awk '{ print tolower($1) }')
                dc_fqdn=$(echo "${3}" | awk '{ print tolower($1) }')
                dc_ip="${4}"
                sqlite3 $file_path <<EOF
.param set :n ${dc_name}
.param set :f ${dc_fqdn}
.param set :i ${dc_ip}
INSERT INTO ${DB_TABLE_DC} (name, fqdn, ip) VALUES (:n, :f, :i)
EOF
            else
                print_error "db_insert" "Invalid number of arguments: ${#}"
                return_code=2
            fi
            ;;

        $DB_TABLE_USER)
            if [ $# -ge 4 ]
            then
                user_domain=$(echo "${2}" | awk '{ print toupper($1) }')
                user_name=$(echo "${3}" | awk '{ print tolower($1) }')
                user_password="${4}"
                sqlite3 $file_path <<EOF
.param set :d ${user_domain}
.param set :n ${user_name}
.param set :p ${user_password}
INSERT INTO ${DB_TABLE_USER} (domain, name, password) VALUES (:d, :n, :p)
EOF
            else
                print_error "db_insert" "Invalid number of arguments: ${#}"
            fi
            ;;

        *)
            print_error "db_insert" "Unknown object type: ${1}"
            return_code=1
        esac
    fi
    return $return_code
}

# DESCRIPTION
#     Remove an entry from the workspace database.
# ARGUMENTS
#     filter - filter for the query (e.g.: username when deleting a user)
# RETURN CODE
#     0  - Everything is fine
#     1  - The workspace database does not exist or is not initialized
function db_delete {
    return_code=0
    is_db_initialized || return 1
    file_path=$(realpath "$(pwd)/${WORKSPACE_DB_FILE}")
    if [ $# -gt 0 ]
    then
        case $1 in
        
        $DB_TABLE_DOMAIN)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print toupper($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
DELETE FROM ${DB_TABLE_DOMAIN} WHERE name=:n
EOF
            else
                print_error "db_delete" "Missing argument: domain name"
            fi
            ;;

        $DB_TABLE_USER)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print tolower($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
DELETE FROM ${DB_TABLE_USER} WHERE name=:n
EOF
            else
                print_error "db_delete" "Missing argument: user name"
            fi
            ;;

        $DB_TABLE_DC)
            if [ $# -eq 2 ]
            then
                filter=$(echo $2 | awk '{ print toupper($1) }')
                sqlite3 $file_path <<EOF
.param set :n ${filter}
DELETE FROM ${DB_TABLE_DC} WHERE name=:n
EOF
            else
                print_error "db_delete" "Missing argument: dc name"
            fi
            ;;

        *)
            print_error "db_select" "Unknown object type: ${1}"
            return_code=1
        esac
    fi
    return $return_code
}

# DESCRIPTION
#     Extract DNS suffixes from the /etc/resolv.conf file.
# ARGUMENTS
#     None
# RETURN CODE
#     0  - Everything is fine
#     1  - No DNS suffix found
function get_dns_suffixes {
    return_code=0
    r="/etc/resolv.conf"
    s=$(cat $r | grep "search")
    if [ $? == 0 ]
    then
        echo "${s}" | cut -d' ' -f2
    else
        print_error "No DNS suffix found in ${r}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Enumerates DCs for a given domain name.
# ARGUMENTS
#     domain - target domain name (tip: use 'get_dns_suffixes')
# RETURN CODE
#     0  - Everything is fine
#     1  - Invalid number of arguments
#     2  - No DC found
function get_dcs {
    return_code=0
    tport="88"
    if [ $# == 1 ]
    then
        nm=$(nmap --script dns-srv-enum --script-args "dns-srv-enum.domain='${1}'" 2>/dev/null | grep "${tport}/tcp")
        if [ $? == 0 ]
        then
            dcs=$(echo "$nm" | awk '{ print $5 }')
            for dc in $(echo "$dcs")
            do
                nc -z -w1 $dc $tport 2>&1 >/dev/null
                if [ $? == 0 ]
                then
                    echo "$dc"
                else
                    print_warning "Failed to connect to '${dc}:${tport}', ignoring DC entry."
                fi
            done
        else
            print_error "No DC found for domain '${1}'"
            return_code=2
        fi
    else
        print_error "get_dcs" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Get the domain name of a given DC through NetBIOS.
# ARGUMENTS
#     ip - IP address of a DC
# RETURN CODE
#     0  - Everything is fine
#     1  - Invalid number of arguments
#     2  - NetBIOS query failed
#     3  - No NT domain found in NetBIOS response
function get_dc_domain {
    return_code=0
    if [ $# -eq 1 ]
    then
        netbios=$(nmblookup -A $1)
        if [ $? -eq 0 ]
        then
            domain_line=$(echo "${netbios}" | grep -i '<1c>')
            if [ $? -eq 0 ]
            then
                domain=$(echo "${domain_line}" | awk '{ print $1 }')
                echo "${domain}"
            else
                print_error "get_dc_domain" "No NT domain found in NetBIOS response"
                return_code=3
            fi
        else
            print_error "get_dc_domain" "NetBIOS query against ${1} failed"
            return_code=2
        fi
    else
        print_error "get_dc_domain" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Return the IP address associated to a hostname.
# ARGUMENTS
#     hostname - target hostname to resolve
# RETURN CODE
#     0  - Everything is fine
#     1  - Invalid number of arguments
#     2  - Failed to resolve
#     1  - IP address not found in 'host" output'
function get_host_ip_addr {
    return_code=0
    if [ $# == 1 ]
    then
        h=$(exec_command "0" "host ${1}")
        if [ $? == 0 ]
        then
            g=$(echo "${h}" | grep "has address")
            if [ $? == 0 ]
            then
                echo "${g}" | cut -d' ' -f4
            else
                print_warning "IP address not found in host command output"
            fi
        else
            print_warning "Failed to resolve '${1}'"
            return_code=2
        fi
    else
        print_error "get_dcs" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Extract the DNS server list from /etc/resolv.conf
# ARGUMENTS
#     None
# RETURN CODE
#     0  - Everything is fine
#     1  - No DNS server found in /etc/resolv.conf
function get_dns_servers {
    return_code=0
    ns=$(cat /etc/resolv.conf | grep "nameserver")
    if [ $? == 0 ]
    then
        for n in "${ns}"
        do
            echo "${n}" | awk '{ print $2 }'
        done
    else
        print_error "No DNS server found in /etc/resolv.conf"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Get the name of the file that contains the list of users for a given domain.
# ARGUMENTS
#     domain - name of the AD domain
# RETURN CODE
#     0  - Everything is fine
#     1  - Domain name was not provided
function get_ad_users_filename {
    return_code=0
    if [ $# == 1 ]
    then
        domain=$(echo "${1}" | awk '{ print tolower($1) }')
        filename="./recon/${domain}_ad_users.txt"
        echo "${filename}"
    else
        print_error "get_ad_users_filename" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Get a DC for a given domain
# ARGUMENTS
#     domain - name of the domain to query
#     id - id of the info to retrieve (1: name, 2: fqdn, 3: IP)
# RETURN CODE
#     0  - Everything is fine
#     1  - Invalid number of arguments
#     2  - Domain not found in database
#     3  - DC not found in database
#     4  - Invalid parameter
function get_dc_for_domain {
    return_code=0
    if [ $# == 2 ]
    then
        domain=$(db_select "domain" "${1}" | head -n1)
        if [ $(echo -n "${domain}" | wc -c) -gt 0 ]
        then
            suffix=$(echo "${domain}" | cut -d'|' -f3)
            dc=$(db_select "dc" | grep "${suffix}" | head -n1)
            if [ $(echo -n "${dc}" | wc -c) -gt 0 ]
            then
                dc_name=$(echo "${dc}" | cut -d'|' -f2)
                dc_fqdn=$(echo "${dc}" | cut -d'|' -f3)
                dc_ip=$(echo "${dc}" | cut -d'|' -f4)
                case $2 in
                1)
                    echo "${dc_name}"
                    ;;
                2)
                    echo "${dc_fqdn}"
                    ;;
                3)
                    echo "${dc_ip}"
                    ;;
                *)
                    print_error "get_dc_for_domain" "Invalid parameter: ${2}"
                    return_code=4
                esac
            else
                return_code=3
            fi
        else
            print_error "get_dc_for_domain" "Domain not found: ${1}"
            return_code=2
        fi
    else
        print_error "get_dc_for_domain" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Get the first user in the database in a given domain in the form "DOMAIN|user".
# ARGUMENTS
#     domain - name of the domain for which a user is to be retrieved
# RETURN CODE
#     0  - Everything is fine
#     1  - No domain name provided
#     2  - No user found for the given domain
function get_user_for_domain {
    return_code=0
    if [ $# -eq 1 ]
    then
        domain=$(echo "${1}" | awk '{ print toupper($1)}')
        query=".param set :d ${domain}
SELECT domain,name FROM ${DB_TABLE_USER} WHERE domain=:d LIMIT 1"
        user=$(db_query "${query}")
        if [ $(echo -n "${user}" | wc -c) -gt 0 ]
        then
            echo "${user}"
        else
            print_error "get_user_for_domain" "No user found in database for domain: '${domain}'"
            return_code=2
        fi
    else
        print_error "get_user_for_domain" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     Get a user's password, give its name and domain.
# ARGUMENTS
#     domain - name of the domain for which a user is to be retrieved
#     name - name of the user
# RETURN CODE
#     0  - Everything is fine
#     1  - Invalid number of arguments
#     2  - PAssword empty or not found
function get_user_password {
    return_code=0
    if [ $# -eq 2 ]
    then
        user_domain="${1}"
        user_name="${2}"
        query=".param set :d ${user_domain}
.param set :n ${user_name}
SELECT password FROM user WHERE domain=:d AND name=:n LIMIT 1"
        password=$(db_query "${query}")
        if [ $(echo -n "${password}" | wc -c) -gt 0 ]
        then
            echo "${password}"
        else
            print_error "get_user_password" "Password not found or empty for user: '${user_domain}\\${user_name}'"
            return_code=2
        fi
    else
        print_error "get_user_password" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}

# DESCRIPTION
#     List users and write to file.
# ARGUMENTS
#     domain - name of the domain to query
# RETURN CODE
#     0  - Everything is fine
#     1  - No domain name provided
#     2  - Domain not found in database
#     3  - DC not found in database
#     4  - Credentials not found in database
#     5  - No user found (unknown error)
function init_ad_users_file {
    return_code=0
    if [ $# == 1 ]
    then
        filename=$(get_ad_users_filename "${1}")
        if [ -f $filename ]
        then
            user_count=$(wc -l $filename | awk '{print $1}')
            print_info "User list already initialized: ${COLOR_CYAN_BOLD}${filename}${COLOR_RST} (${COLOR_CYAN_BOLD}${user_count}${COLOR_RST} users)"
        else
            print_info "User list not yet initialized"
            # 1. Find the DNS suffix corresponding to the domain
            domain=$(db_select "domain" "${1}" | head -n1)
            if [ $(echo -n "${domain}" | wc -c) -gt 0 ]
            then
                print_info "Found domain in database: ${domain}"
                suffix=$(echo "${domain}" | cut -d'|' -f3)
                # 3. Find a DC to query
                dc=$(db_select "dc" | grep "${suffix}" | head -n1)
                if [ $(echo -n "${dc}" | wc -c) -gt 0 ]
                then
                    print_info "Found a DC in database: ${dc}"
                    dc_ip=$(echo "${dc}" | cut -d'|' -f4)
                    # 4. Find credentials to use for querying the DC
                    dom=$(echo "${1}" | awk '{ print toupper($1)}')
                    query=".param set :d ${dom}
SELECT name FROM ${DB_TABLE_USER} WHERE domain=:d LIMIT 1"
                    user_name=$(db_query "${query}")
                    if [ $(echo -n "${user_name}" | wc -c) -gt 0 ]
                    then
                        print_info "Found a user for domain '${dom}' in database: ${user_name}"
                        query=".param set :n ${user_name}
SELECT password FROM ${DB_TABLE_USER} WHERE name=:n"
                        user_pass=$(db_query "${query}")
                        is_nt_hash "${user_pass}"
                        if [ $? -eq 0 ]
                        then
                            command="${IMPACKET_GETADUSERS} '${suffix}/${user_name}' -hahes '${user_pass}:${user_pass}' -dc-ip '${dc_ip}' -all"
                        else
                            command="${IMPACKET_GETADUSERS} '${suffix}/${user_name}:${user_pass}' -dc-ip '${dc_ip}' -all"
                        fi
                        tmp_file="/tmp/$(generate_random_string)"
                        command="${command} >${tmp_file}"
                        exec_command_and_print_status "${command}" "List all users for domain '${dom}' on DC with IP '${dc_ip}'"
                        
                        if [ $? -eq 0 ]
                        then
                            start=0
                            while IFS= read -r line
                            do
                                if [ $start -eq 1 ]
                                then
                                    user=$(echo "$line" | awk '{ print tolower($1) }' | iconv -f utf-8 -t ascii//translit)
                                    echo "$user" >>$filename
                                fi
                                echo "$line" | grep -E "^---" > /dev/null
                                if [ $? == 0 ]
                                then
                                    start=1
                                fi  
                            done < $tmp_file
                        fi
                        
                        user_count=$(wc -l $filename | awk '{ print $1 }')
                        if [[ $user_count -gt 1 ]]
                        then
                            print_success "Found ${user_count} users and created file: ${COLOR_CYAN_BOLD}${filename}${COLOR_RST}"
                        else
                            print_warning "Something went wrong. Command was: $command"
                            cat $tmp_file
                            return_code=5
                        fi

                        rm -f $tmp_file
                    else
                        print_error "Credentials not found in database for domain: '${dom}'"
                        return_code=4
                    fi
                else
                    print_error "DC not found in database for DNS suffix '${suffix}'"
                    return_code=3
                fi
            else
                print_error "Domain '${1}' not found in database"
                return_code=2
            fi
        fi
    else
        print_error "init_ad_users_file" "Invalid number of arguments: ${#}"
        return_code=1
    fi
    return $return_code
}