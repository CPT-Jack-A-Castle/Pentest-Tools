#!/bin/bash

COLOR_RST="\e[0m"
COLOR_CYAN_BOLD="\e[1;36m"
DIR_PUB="/pub"
DIR_TOOLS="/opt"
DIR_TOOLS_NESSUS="$DIR_TOOLS/nessus"
USER_NAME=$(logname)
USER_HOME=$(eval echo ~$USER_NAME)

function update_system() {
    echo -e "$COLOR_CYAN_BOLD[*] Updating package list.$COLOR_RST"
    apt update

    echo -e "$COLOR_CYAN_BOLD[*] Updating packages.$COLOR_RST"
    apt upgrade -y
    apt full-upgrade -y

    echo -e "$COLOR_CYAN_BOLD[*] Updating system.$COLOR_RST"
    apt dist-upgrade -y

    echo -e "$COLOR_CYAN_BOLD[*] Removing unused packages.$COLOR_RST"
    apt autoclean -y
    apt autoremove -y
    
    which snap >/dev/null
    if [ $? -eq 0 ];
    then
        echo -e "$COLOR_CYAN_BOLD[*] Updating snap pachages.$COLOR_RST"
        snap refresh
    fi
}

function update_nessus() {
    # Update Nessus if present 
    if [ -d $DIR_TOOLS_NESSUS ];
    then
        echo -e "$COLOR_CYAN_BOLD[*] Updating Nessus.$COLOR_RST"
        service nessusd stop 
        bash -c "$DIR_TOOLS_NESSUS/sbin/nessuscli update --all" 
        echo ""
    fi
}

function update_git_repos() {
    # Update GIT repositories 
    echo -e "$COLOR_CYAN_BOLD[*] Updating GIT repositories.$COLOR_RST"
    if [ ! -z $DIR_TOOLS ];
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do 
            if [ -d "$d/.git" ];
            then
              echo -e "$COLOR_CYAN_BOLD[*] GIT repository: '$d'. Trying to update.$COLOR_RST"
              old_pwd=$(pwd)
              cd "$d"
              git pull | grep -v "Already up to date."
              cd "$old_pwd"  
            fi
        done
    fi
}

function update_git_release_folders() {
    # Update folders containing a custom GitHub release file
    echo -e "$COLOR_CYAN_BOLD[*] Updating GIT release folders.$COLOR_RST"
    if [ ! -z $DIR_TOOLS ]
    then
        for d in $(find "$DIR_TOOLS" -maxdepth 2 -type d)
        do
            if [ -f "$d/.release" ]
            then
                echo -e "$COLOR_CYAN_BOLD[*] Found .release file in '$d'.$COLOR_RST"
                old_pwd=$(pwd)
                cd "$d"
                file_content=$(cat "./.release")
                url="$(echo -e $file_content | cut -d',' -f1)"
                version="$(echo -e $file_content | cut -d',' -f2)"
                echo -e "$COLOR_CYAN_BOLD[*] URL: $url$COLOR_RST"
                echo -e "$COLOR_CYAN_BOLD[*] VERSION: $version$COLOR_RST"
                if [ "$url" == "" -o "$version" == "" ]
                then
                    echo -e "$COLOR_CYAN_BOLD[*] Release file is malformed!$COLOR_RST"
                else
                    echo -e "$COLOR_CYAN_BOLD[*] Release file OK.$COLOR_RST"
                    releases="$(curl --silent $url)"
                    version_cur="$(echo -e $releases | jq -r '.tag_name')"
                    if [ $version_cur == $version ]
                    then
                        echo -e "$COLOR_CYAN_BOLD[*] This folder is already up to date.$COLOR_RST"
                    else
                        echo -e "$COLOR_CYAN_BOLD[*] New version available: $version_cur$COLOR_RST"
                        echo -e "$COLOR_CYAN_BOLD[*] Removing old files.$COLOR_RST"
                        rm -rf *
                        urls="$(echo $releases | jq -r '.assets[] | select(.).browser_download_url')"
                        for u in $(echo -e $urls)
                        do
                            echo -e "$COLOR_CYAN_BOLD[*] URL: $u$COLOR_RST"
                            wget --quiet $u
                            filefullname="${u##*/}"
                            filename="${filefullname%.*}"
                            fileext="${filefullname##*.}"
                            if [ $fileext == "zip" ]
                            then
                                echo -e "$COLOR_CYAN_BOLD[*] ZIP archive: $filefullname$COLOR_RST"
                                unzip $filefullname 1>/dev/null
                                rm -f $filefullname
                            elif [ $fileext == "gz" ]
                            then
                                echo -e "$COLOR_CYAN_BOLD[*] GZIP archive: $filefullname$COLOR_RST"
                                gzip -d $filefullname
                            elif [ $fileext == "7z" ]
                            then
                                echo -e "$COLOR_CYAN_BOLD[*] 7Z archive: $filefullname$COLOR_RST"
                                7z d $filefullname 1>/dev/null
                                rm -f $filefullname
                            fi
                        done
                        release="$url,$version_cur"
                        echo -e "$COLOR_CYAN_BOLD[*] New release: $release$COLOR_RST"
                        echo $release > ".release"
                    fi
                fi
                cd $old_pwd
            fi
        done
    fi
}

function update_python_packages() {
    
    echo -e "$COLOR_CYAN_BOLD[*] Updating Python packages.$COLOR_RST"
    
    out_file="/tmp/requirements.txt"
    
    pip freeze | sed s/'=='/'>='/g > $out_file
    pip install -r $out_file --upgrade
    
    pip3 freeze | sed s/'=='/'>='/g > $out_file
    pip3 install -r $out_file --upgrade
    
    rm $out_file 2>/dev/null 
}

# Check if current user is root
if [ ! $(id --u) == 0 ];
then
    echo "You must be root"
    exit
fi

update_system
update_nessus
update_git_repos
update_git_release_folders
#update_python_packages

